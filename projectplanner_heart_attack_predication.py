# -*- coding: utf-8 -*-
"""ProjectPlanner_Heart_Attack_Predication.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q7gC764gD--Zg6XmRoi74ho7CwSoZvvt
"""

# Importing Required Libraries
import pandas as pd
from sklearn.preprocessing import LabelEncoder, StandardScaler

# Loading Data
heart_data = pd.read_csv('/content/sample_data/heart.csv')

# Preprocessing Data
le = LabelEncoder()
heart_data['age'] = le.fit_transform(heart_data['age'])
heart_data['sex'] = le.fit_transform(heart_data['sex'])
heart_data['cp'] = le.fit_transform(heart_data['cp'])
heart_data['target'] = le.fit_transform(heart_data['target'])
heart_data['chol'] = le.fit_transform(heart_data['chol'])
heart_data['fbs'] = le.fit_transform(heart_data['fbs'])
heart_data['restecg'] = le.fit_transform(heart_data['restecg'])
heart_data['thalachh'] = le.fit_transform(heart_data['thalachh'])
heart_data['exng'] = le.fit_transform(heart_data['exng'])
heart_data['oldpeak'] = le.fit_transform(heart_data['oldpeak'])
heart_data['slp'] = le.fit_transform(heart_data['slp'])
heart_data['caa'] = le.fit_transform(heart_data['caa'])
heart_data['thall'] = le.fit_transform(heart_data['thall'])
heart_data['output'] = le.fit_transform(heart_data['output'])

scaler = StandardScaler()
X = heart_data.drop('target', axis=1)
y = heart_data['target']
X = scaler.fit_transform(X)
# print(heart_data.columns)

# Feature Selection
from sklearn.feature_selection import SelectKBest, f_classif

selector = SelectKBest(score_func=f_classif, k=10)
X = selector.fit_transform(X, y)

# Model Training
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Model Evaluation
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

y_pred = rf_model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred, average='weighted')
recall = recall_score(y_test, y_pred,average='weighted')
f1 = f1_score(y_test, y_pred, average='weighted')

print("Accuracy: ", accuracy)
print("Precision: ", precision)
print("Recall: ", recall)
print("F1 Score: ", f1)

# Prediction
patient_features = [[63,1,3,145,233,1,0,150,0,2.3,0,0,1]]
patient_features = scaler.transform(patient_features)
patient_features = selector.transform(patient_features)
prediction = rf_model.predict(patient_features)
print(prediction)